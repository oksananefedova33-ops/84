(function(){
    'use strict';
    
    let domains = JSON.parse(localStorage.getItem('rs_domains') || '[]');
    let selectedDomains = [];
    let selectedItems = [];
    let currentTab = 'files';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Ç—É–ª–±–∞—Ä
    function addRemoteSitesButton() {
        const toolbar = document.querySelector('.topbar');
        if (!toolbar || document.getElementById('btnRemoteSites')) return;
        
        const btn = document.createElement('button');
        btn.type = 'button';
        btn.id = 'btnRemoteSites';
        btn.className = 'btn';
        btn.textContent = 'üåê –ú–æ–∏ —Å–∞–π—Ç—ã';
        btn.addEventListener('click', openModal);
        
        const exportBtn = toolbar.querySelector('#btnExport');
        if (exportBtn) {
            exportBtn.parentNode.insertBefore(btn, exportBtn);
        } else {
            toolbar.appendChild(btn);
        }
    }
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    function createModal() {
        if (document.getElementById('rsModalBackdrop')) return;
        
        const backdrop = document.createElement('div');
        backdrop.id = 'rsModalBackdrop';
        backdrop.className = 'rs-backdrop hidden';
        
        const modal = document.createElement('div');
        modal.className = 'rs-modal';
        
        modal.innerHTML = `
            <div class="rs-modal__header">
                <div class="rs-modal__title">üåê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω—ã–º–∏ —Å–∞–π—Ç–∞–º–∏</div>
                <button type="button" class="rs-close">√ó</button>
            </div>
            <div class="rs-modal__body">
                <!-- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞ -->
                <div class="rs-section">
                    <div class="rs-section__title">–î–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç</div>
                    <div class="rs-input-group">
                        <input type="text" class="rs-input" id="rsNewDomain" placeholder="https://example.com">
                        <button class="rs-btn" id="rsCheckConnection">üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</button>
                        <button class="rs-btn primary" id="rsAddDomain">‚ûï –î–æ–±–∞–≤–∏—Ç—å</button>
                    </div>
                    <div id="rsConnectionStatus"></div>
                </div>
                
                <!-- –°–ø–∏—Å–æ–∫ –¥–æ–º–µ–Ω–æ–≤ -->
                <div class="rs-section">
                    <div class="rs-section__title">–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–∞–π—Ç—ã</div>
                    <div class="rs-domain-list" id="rsDomainList"></div>
                </div>
                
                <!-- –ö–æ–Ω—Ç–µ–Ω—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ -->
                <div class="rs-section" id="rsContentSection" style="display:none">
                    <div class="rs-section__title">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º</div>
                    
                    <div class="rs-content-tabs">
                        <button class="rs-tab active" data-tab="files">üìÅ –§–∞–π–ª—ã –≤ –∫–Ω–æ–ø–∫–∞—Ö</button>
                        <button class="rs-tab" data-tab="links">üîó –°—Å—ã–ª–∫–∏ –≤ –∫–Ω–æ–ø–∫–∞—Ö</button>
                    </div>
                    
                    <!-- –ü–∞–Ω–µ–ª—å —Ñ–∞–π–ª–æ–≤ -->
                    <div class="rs-content-panel active" data-panel="files">
                        <div class="rs-items-list" id="rsFilesList">
                            <div class="rs-empty">–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º–µ–Ω—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤</div>
                        </div>
                        
                        <div class="rs-replace-section">
                            <div style="margin-bottom:12px">
                                <label style="color:#9fb2c6;font-size:13px">–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª:</label>
                                <input type="file" id="rsNewFile" style="margin-top:8px">
                            </div>
                            <button class="rs-btn primary" id="rsReplaceFiles">üîÑ –ó–∞–º–µ–Ω–∏—Ç—å —Ñ–∞–π–ª—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–∞—Ö</button>
                        </div>
                    </div>
                    
                    <!-- –ü–∞–Ω–µ–ª—å —Å—Å—ã–ª–æ–∫ -->
                    <div class="rs-content-panel" data-panel="links">
                        <div class="rs-items-list" id="rsLinksList">
                            <div class="rs-empty">–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º–µ–Ω—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Å—ã–ª–æ–∫</div>
                        </div>
                        
                        <div class="rs-replace-section">
                            <div style="margin-bottom:12px">
                                <label style="color:#9fb2c6;font-size:13px">–ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞:</label>
                                <input type="text" class="rs-input" id="rsNewLink" placeholder="https://new-link.com" style="margin-top:8px">
                            </div>
                            <button class="rs-btn primary" id="rsReplaceLinks">üîÑ –ó–∞–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–∞—Ö</button>
                        </div>
                    </div>
                </div>
                
                <div id="rsStatus"></div>
                
                <!-- Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
                <div class="rs-section" id="rsDebugSection" style="display:none; background: #0a0d13; border-color: #2a3441;">
                    <div class="rs-section__title">üêõ Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</div>
                    <pre id="rsDebugContent" style="color: #9fb2c6; font-size: 11px; overflow: auto; max-height: 200px;"></pre>
                </div>
            </div>
        `;
        
        backdrop.appendChild(modal);
        document.body.appendChild(backdrop);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        modal.querySelector('.rs-close').addEventListener('click', closeModal);
        backdrop.addEventListener('click', (e) => {
            if (e.target === backdrop) closeModal();
        });
        
        document.getElementById('rsCheckConnection').addEventListener('click', checkConnection);
        document.getElementById('rsAddDomain').addEventListener('click', addDomain);
        document.getElementById('rsReplaceFiles').addEventListener('click', replaceFiles);
        document.getElementById('rsReplaceLinks').addEventListener('click', replaceLinks);
        
        // –¢–∞–±—ã
        modal.querySelectorAll('.rs-tab').forEach(tab => {
            tab.addEventListener('click', () => switchTab(tab.dataset.tab));
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ö–æ—Ç–∫–µ–π –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è debug —Ä–µ–∂–∏–º–∞ (Ctrl+Shift+D)
        document.addEventListener('keydown', function(e) {
            if (e.ctrlKey && e.shiftKey && e.key === 'D') {
                const debugSection = document.getElementById('rsDebugSection');
                if (debugSection) {
                    debugSection.style.display = debugSection.style.display === 'none' ? 'block' : 'none';
                }
            }
        });
    }
    
    function openModal() {
        createModal();
        document.getElementById('rsModalBackdrop').classList.remove('hidden');
        renderDomains();
    }
    
    function closeModal() {
        document.getElementById('rsModalBackdrop').classList.add('hidden');
    }
    
    function renderDomains() {
        const list = document.getElementById('rsDomainList');
        
        if (domains.length === 0) {
            list.innerHTML = '<div class="rs-empty">–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤</div>';
            document.getElementById('rsContentSection').style.display = 'none';
            return;
        }
        
        list.innerHTML = domains.map(domain => `
            <div class="rs-domain-item">
                <input type="checkbox" class="rs-domain-checkbox" data-domain="${domain.url}">
                <span class="rs-domain-name">${domain.url}</span>
                <span class="rs-domain-status ${domain.active ? 'active' : 'inactive'}"></span>
                <button class="rs-domain-remove" data-domain="${domain.url}">√ó</button>
            </div>
        `).join('');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        list.querySelectorAll('.rs-domain-checkbox').forEach(cb => {
            cb.addEventListener('change', updateSelectedDomains);
        });
        
        list.querySelectorAll('.rs-domain-remove').forEach(btn => {
            btn.addEventListener('click', () => removeDomain(btn.dataset.domain));
        });
        
        checkAllConnections();
    }
    
    function updateSelectedDomains() {
        selectedDomains = [];
        document.querySelectorAll('.rs-domain-checkbox:checked').forEach(cb => {
            selectedDomains.push(cb.dataset.domain);
        });
        
        if (selectedDomains.length > 0) {
            document.getElementById('rsContentSection').style.display = 'block';
            loadContent();
        } else {
            document.getElementById('rsContentSection').style.display = 'none';
        }
    }
    
    async function checkConnection() {
        const url = document.getElementById('rsNewDomain').value.trim();
        if (!url) {
            showStatus('–í–≤–µ–¥–∏—Ç–µ URL —Å–∞–π—Ç–∞', 'error');
            return;
        }
        
        showStatus('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...', 'info');
        
        try {
            const response = await fetch('/ui/remote-sites/remote-api.php', {
                method: 'POST',
                headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                body: `action=check&url=${encodeURIComponent(url)}`
            });
            
            const data = await response.json();
            
            if (data.ok) {
                showStatus('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'success');
            } else {
                showStatus('‚ùå ' + (data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è'), 'error');
            }
        } catch (error) {
            showStatus('‚ùå –û—à–∏–±–∫–∞: ' + error.message, 'error');
        }
    }
    
    async function checkAllConnections() {
        for (let domain of domains) {
            try {
                const response = await fetch('/ui/remote-sites/remote-api.php', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                    body: `action=check&url=${encodeURIComponent(domain.url)}`
                });
                
                const data = await response.json();
                domain.active = data.ok;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
                const statusElements = document.querySelectorAll('.rs-domain-item');
                statusElements.forEach(el => {
                    const domainName = el.querySelector('.rs-domain-name');
                    if (domainName && domainName.textContent === domain.url) {
                        const status = el.querySelector('.rs-domain-status');
                        if (status) {
                            status.className = `rs-domain-status ${domain.active ? 'active' : 'inactive'}`;
                        }
                    }
                });
            } catch (error) {
                domain.active = false;
            }
        }
        
        saveDomains();
    }
    
    function addDomain() {
        const url = document.getElementById('rsNewDomain').value.trim();
        if (!url) {
            showStatus('–í–≤–µ–¥–∏—Ç–µ URL —Å–∞–π—Ç–∞', 'error');
            return;
        }
        
        if (domains.find(d => d.url === url)) {
            showStatus('–≠—Ç–æ—Ç —Å–∞–π—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω', 'error');
            return;
        }
        
        domains.push({url, active: false});
        saveDomains();
        
        document.getElementById('rsNewDomain').value = '';
        renderDomains();
        showStatus('–°–∞–π—Ç –¥–æ–±–∞–≤–ª–µ–Ω', 'success');
    }
    
    function removeDomain(url) {
        if (!confirm(`–£–¥–∞–ª–∏—Ç—å —Å–∞–π—Ç ${url}?`)) return;
        
        domains = domains.filter(d => d.url !== url);
        saveDomains();
        renderDomains();
    }
    
    function saveDomains() {
        localStorage.setItem('rs_domains', JSON.stringify(domains));
    }
    
    function switchTab(tab) {
        currentTab = tab;
        
        document.querySelectorAll('.rs-tab').forEach(t => {
            t.classList.toggle('active', t.dataset.tab === tab);
        });
        
        document.querySelectorAll('.rs-content-panel').forEach(p => {
            p.classList.toggle('active', p.dataset.panel === tab);
        });
        
        loadContent();
    }
    
    async function loadContent() {
        if (selectedDomains.length === 0) return;
        
        const listEl = currentTab === 'files' 
            ? document.getElementById('rsFilesList')
            : document.getElementById('rsLinksList');
        
        listEl.innerHTML = '<div class="rs-loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>';
        
        const items = new Map();
        
        for (let domainUrl of selectedDomains) {
            try {
                const response = await fetch('/ui/remote-sites/remote-api.php', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                    body: `action=list&url=${encodeURIComponent(domainUrl)}&type=${currentTab}`
                });
                
                const data = await response.json();
                
                if (data.ok && data.items) {
                    data.items.forEach(item => {
                        const key = currentTab === 'files' ? item.url : item.url;
                        if (!items.has(key)) {
                            items.set(key, {...item, domains: [domainUrl]});
                        } else {
                            items.get(key).domains.push(domainUrl);
                        }
                    });
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å', domainUrl, error);
            }
        }
        
        if (items.size === 0) {
            listEl.innerHTML = '<div class="rs-empty">–ù–µ—Ç ' + (currentTab === 'files' ? '—Ñ–∞–π–ª–æ–≤' : '—Å—Å—ã–ª–æ–∫') + '</div>';
            return;
        }
        
        listEl.innerHTML = Array.from(items.values()).map(item => {
            const icon = currentTab === 'files' ? getFileIcon(item.name) : 'üîó';
            const name = currentTab === 'files' ? item.name : item.url;
            
            return `
                <div class="rs-item" data-url="${item.url}">
                    <input type="checkbox" class="rs-item-checkbox" data-url="${item.url}">
                    <span class="rs-item-icon">${icon}</span>
                    <span class="rs-item-name" title="${name}">${name}</span>
                    <small style="color:#6b7280; margin-left:auto">${item.url}</small>
                </div>
            `;
        }).join('');
        
        listEl.querySelectorAll('.rs-item-checkbox').forEach(cb => {
            cb.addEventListener('change', updateSelectedItems);
        });
    }
    
    function updateSelectedItems() {
        selectedItems = [];
        document.querySelectorAll('.rs-item-checkbox:checked').forEach(cb => {
            selectedItems.push(cb.dataset.url);
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        updateDebugInfo('Selected items: ' + JSON.stringify(selectedItems));
    }
    
    async function replaceFiles() {
        const fileInput = document.getElementById('rsNewFile');
        const file = fileInput.files[0];
        
        if (!file) {
            showStatus('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏', 'error');
            return;
        }
        
        if (selectedItems.length === 0) {
            showStatus('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–º–µ–Ω—ã', 'error');
            return;
        }
        
        if (selectedDomains.length === 0) {
            showStatus('–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º–µ–Ω—ã', 'error');
            return;
        }
        
        showStatus('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞...', 'info');
        updateDebugInfo('Starting file upload: ' + file.name);
        
        // –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –ª–æ–∫–∞–ª—å–Ω–æ
        const fd = new FormData();
        fd.append('file', file);
        fd.append('type', 'file');
        
        try {
            const uploadResp = await fetch('/editor/api.php?action=uploadAsset&type=file', {
                method: 'POST',
                body: fd
            });
            
            const uploadData = await uploadResp.json();
            updateDebugInfo('Upload response: ' + JSON.stringify(uploadData));
            
            if (!uploadData.ok) {
                showStatus('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + (uploadData.error || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è'), 'error');
                return;
            }
            
            // –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã
            let successCount = 0;
            let failCount = 0;
            let debugResponses = [];
            
            for (let domainUrl of selectedDomains) {
                for (let oldUrl of selectedItems) {
                    try {
                        updateDebugInfo(`Replacing ${oldUrl} on ${domainUrl}...`);
                        
                        const response = await fetch('/ui/remote-sites/remote-api.php', {
                            method: 'POST',
                            headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                            body: `action=replace_file&domain=${encodeURIComponent(domainUrl)}&old_url=${encodeURIComponent(oldUrl)}&new_url=${encodeURIComponent(uploadData.url)}&file_name=${encodeURIComponent(file.name)}`
                        });
                        
                        const data = await response.json();
                        debugResponses.push({
                            domain: domainUrl,
                            oldUrl: oldUrl,
                            response: data
                        });
                        
                        updateDebugInfo(`Response from ${domainUrl}: ` + JSON.stringify(data));
                        
                        if (data.ok) {
                            if (data.replaced && data.replaced > 0) {
                                successCount++;
                            } else {
                                failCount++;
                                updateDebugInfo(`‚ö†Ô∏è No replacements made on ${domainUrl} for ${oldUrl}`);
                            }
                        } else {
                            failCount++;
                        }
                    } catch (error) {
                        failCount++;
                        console.error('–û—à–∏–±–∫–∞ –∑–∞–º–µ–Ω—ã –Ω–∞', domainUrl, error);
                        updateDebugInfo(`Error on ${domainUrl}: ${error.message}`);
                    }
                }
            }
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            let statusMessage = '';
            if (successCount > 0) {
                statusMessage += `‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω–æ: ${successCount}`;
            }
            if (failCount > 0) {
                statusMessage += (statusMessage ? ', ' : '') + `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º–µ–Ω–∏—Ç—å: ${failCount}`;
            }
            
            showStatus(statusMessage || '–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞', successCount > 0 ? 'success' : 'error');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ–Ω—Å–æ–ª–∏
            console.log('Debug responses:', debugResponses);
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            loadContent();
            
        } catch (error) {
            showStatus('–û—à–∏–±–∫–∞: ' + error.message, 'error');
            updateDebugInfo('Fatal error: ' + error.message);
        }
    }
    
    async function replaceLinks() {
        const newLink = document.getElementById('rsNewLink').value.trim();
        
        if (!newLink) {
            showStatus('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É', 'error');
            return;
        }
        
        if (selectedItems.length === 0) {
            showStatus('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –∑–∞–º–µ–Ω—ã', 'error');
            return;
        }
        
        if (selectedDomains.length === 0) {
            showStatus('–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º–µ–Ω—ã', 'error');
            return;
        }
        
        showStatus('–ó–∞–º–µ–Ω–∞ —Å—Å—ã–ª–æ–∫...', 'info');
        updateDebugInfo('Starting link replacement: ' + newLink);
        
        let successCount = 0;
        let failCount = 0;
        
        for (let domainUrl of selectedDomains) {
            for (let oldUrl of selectedItems) {
                try {
                    updateDebugInfo(`Replacing ${oldUrl} with ${newLink} on ${domainUrl}...`);
                    
                    const response = await fetch('/ui/remote-sites/remote-api.php', {
                        method: 'POST',
                        headers: {'Content-Type': 'application/x-www-form-urlencoded'},
                        body: `action=replace_link&domain=${encodeURIComponent(domainUrl)}&old_url=${encodeURIComponent(oldUrl)}&new_url=${encodeURIComponent(newLink)}`
                    });
                    
                    const data = await response.json();
                    updateDebugInfo(`Response from ${domainUrl}: ` + JSON.stringify(data));
                    
                    if (data.ok && data.replaced > 0) {
                        successCount++;
                    } else {
                        failCount++;
                    }
                } catch (error) {
                    failCount++;
                    console.error('–û—à–∏–±–∫–∞ –∑–∞–º–µ–Ω—ã –Ω–∞', domainUrl, error);
                    updateDebugInfo(`Error on ${domainUrl}: ${error.message}`);
                }
            }
        }
        
        let statusMessage = '';
        if (successCount > 0) {
            statusMessage += `‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω–æ: ${successCount}`;
        }
        if (failCount > 0) {
            statusMessage += (statusMessage ? ', ' : '') + `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º–µ–Ω–∏—Ç—å: ${failCount}`;
        }
        
        showStatus(statusMessage || '–û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞', successCount > 0 ? 'success' : 'error');
        loadContent();
    }
    
    function getFileIcon(fileName) {
        if (!fileName) return 'üìÑ';
        const ext = fileName.split('.').pop().toLowerCase();
        
        const icons = {
            'zip': 'üì¶', 'rar': 'üì¶', '7z': 'üì¶',
            'pdf': 'üìï',
            'doc': 'üìò', 'docx': 'üìò',
            'xls': 'üìó', 'xlsx': 'üìó',
            'ppt': 'üìô', 'pptx': 'üìô',
            'mp3': 'üéµ', 'mp4': 'üé¨',
            'jpg': 'üñºÔ∏è', 'png': 'üñºÔ∏è', 'gif': 'üñºÔ∏è',
            'txt': 'üìù'
        };
        
        return icons[ext] || 'üìÑ';
    }
    
    function showStatus(message, type = 'info') {
        const status = document.getElementById('rsStatus');
        status.className = 'rs-status ' + (type === 'info' ? '' : type);
        status.textContent = message;
        
        if (type !== 'info') {
            setTimeout(() => {
                status.textContent = '';
                status.className = '';
            }, 5000);
        }
    }
    
    function updateDebugInfo(message) {
        const debugContent = document.getElementById('rsDebugContent');
        if (debugContent) {
            const timestamp = new Date().toLocaleTimeString();
            debugContent.textContent += `[${timestamp}] ${message}\n`;
            debugContent.scrollTop = debugContent.scrollHeight;
        }
        console.log('[RS Debug]', message);
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    document.addEventListener('DOMContentLoaded', function() {
        addRemoteSitesButton();
    });
})();